{
  "address": "0xd5332e322bA2A5842660911B51Af625511D9E9A7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle_UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum LotteryVRF.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7be6b9c704976447428a3013b8ac264b74f1f818ab7832d02a644d679e36c200",
  "receipt": {
    "to": null,
    "from": "0x3404446637B0Ec81eb53E9F1B48c907de0860287",
    "contractAddress": "0xd5332e322bA2A5842660911B51Af625511D9E9A7",
    "transactionIndex": 7,
    "gasUsed": "1267682",
    "logsBloom": "0x
    "blockHash": "0xc7a45415d1f81d4b7ba6db787dfa83e76429259476cb6cfbac6ee0279fde31de",
    "transactionHash": "0x7be6b9c704976447428a3013b8ac264b74f1f818ab7832d02a644d679e36c200",
    "logs": [],
    "blockNumber": 11180577,
    "cumulativeGasUsed": "2228971",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "10000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "10222",
    "600000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "be70784fa28147558d48aef839218b3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle_UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum LotteryVRF.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"AroundTheBlock7\",\"details\":\"This implements Chainlink VRF v2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Lottery Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating an untamperable decentralized smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryVRF.sol\":\"LotteryVRF\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/LotteryVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\n//Goals for our lotttery contract...\\n//We want users to be able to enter the lottery (paying some fee to enter)\\n//Users can pick a random number (verifiably random)\\n//Winner to be selected every X minutes or at some frequency we decide on\\n//We want everything to be completely automated, not requiring manual maintenance\\n//Must use a chainlink oracle = Randomness (automated execution) Chainlink keepers\\n\\nerror Raffle_NotEnoughETHEntered();\\nerror Raffle_TransferFailed();\\nerror Raffle_NotOpen();\\nerror Raffle_UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 raffleState\\n);\\n\\n/** @title A sample Lottery Contract\\n *  @author AroundTheBlock7\\n *  @notice This contract is for creating an untamperable decentralized smart contract\\n *  @dev This implements Chainlink VRF v2 and Chainlink Keepers\\n */\\n\\ncontract LotteryVRF is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    enum RaffleState {\\n        OPEN, //0\\n        CALCULATING //1\\n    }\\n\\n    //State Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint256 public immutable i_entranceFee;\\n    address payable[] public s_players;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    //Lottery variables\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    event LotteryEnter(address indexed player);\\n    event RequestedLotteryWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_entranceFee = entranceFee;\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterLottery() public payable {\\n        //require (msg.value > i_entranceFee, \\\"Not enough ETH!\\\") Instead of this, we can use the if and revert which is cheaper\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle_NotEnoughETHEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle_NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit LotteryEnter(msg.sender);\\n    }\\n\\n    //This is the function that the Chainlink Keeper Nodes call. It is run offchain! \\n    //They look for the `upkeepNeeded' to return true.\\n    //The following should be true in order to return true....\\n    //1.) Our time interval should have passed\\n    //2.) The lottery should have at least 1 player and have some ETH\\n    //3.) Our subscription is funded with LINK\\n    //4.) The lottery should be in an \\\"open\\\" state.\\n    //The input bytes memory checkData allows us to input any data we want. We wont need for this so we can take out checkData\\n    //We also don't need performData in the return statement which woulc allow us to do other stuff. We want bool upkeepNeeded!\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    //This function interacts interacts VRFConsumerBaseV2 Contract/Oracle.\\n    //If checkUpKeep returns true, than the node automatically calls performUpkeep here.\\n    //When this is executed by the node it returns a random number & triggers the fulfillRandomWords \\n    //Initally we called this function \\\"requestRandomWinner\\\", but after we incorporated keepers and wrote...\\n    //...the \\\"checkUpkeep\\\" function we renamed this function to performUpkeep and gave it proper inputs (bytes calldata performData)\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        //Remember upkeepNeeded and performData were the 2 things returned to us in checkUpkeep function above\\n        //We pass in upkeepNeeded here but we do not need performData so leave that out\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle_UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        //We want to make sure we set the RaffleState to calculating so to avoid new entries while we pick a winner\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        emit RequestedLotteryWinner(requestId);\\n    }\\n\\n    //This function is filled by the VRFCoordinator via the VRFCoordinatorV2Interface.\\n    //This is automatically called after the requestRandomWinner/performUpkeep function is triggered. The VRFCoordinator fills the request here.\\n    function fulfillRandomWords(\\n        uint256,\\n        /*requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        //After we pick the winner we want to set the RaffleState to open again and reset the players array!\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0); //resets the array\\n        //We also want to reset the timestamp here so to keep things running smooth with the interval and picking next winner\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        //require(success, etc.) chepaer way to do it...\\n        if (!success) {\\n            revert Raffle_TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    //When retreiving constant variables in storage we can use \\\"pure\\\" instead of \\\"view\\\" for visibility\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    //Again, can use \\\"pure\\\" instead of \\\"view\\\" when returning constants\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n}\\n\",\"keccak256\":\"0x3dbb763dd6bf048c856732b42368427d061ad181f4081460199e68556b9704f8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001943380380620019438339818101604052810190620000389190620001ad565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508460c081815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff02191690836001811115620001195762000118620002b5565b5b0217905550426002819055508061014081815250505050505050506200036b565b6000815190506200014b81620002e9565b92915050565b600081519050620001628162000303565b92915050565b60008151905062000179816200031d565b92915050565b600081519050620001908162000337565b92915050565b600081519050620001a78162000351565b92915050565b60008060008060008060c08789031215620001cd57620001cc620002e4565b5b6000620001dd89828a016200013a565b9650506020620001f089828a0162000168565b95505060406200020389828a0162000151565b94505060606200021689828a0162000196565b93505060806200022989828a016200017f565b92505060a06200023c89828a0162000168565b9150509295509295509295565b6000620002568262000267565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f48162000249565b81146200030057600080fd5b50565b6200030e816200025d565b81146200031a57600080fd5b50565b620003288162000287565b81146200033457600080fd5b50565b620003428162000291565b81146200034e57600080fd5b50565b6200035c81620002a1565b81146200036857600080fd5b50565b60805160601c60a05160601c60c05160e0516101005160c01c6101205160e01c6101405161155c620003e760003960006106df0152600061058e0152600061056b0152600061054a0152600081816103520152818161078601526107e90152600061050e01526000818161038f01526103e3015261155c6000f3fe6080604052600436106100dd5760003560e01c80635f1b0fd81161007f578063ae771f6b11610059578063ae771f6b1461029f578063c1af5785146102dc578063e55ae4e8146102e6578063fd6673f514610323576100dd565b80635f1b0fd81461020b5780636e04ff0d146102365780637ea3e6c114610274576100dd565b8063320229eb116100bb578063320229eb146101615780634585e33b1461018c578063473f1ddc146101b557806353a2c19a146101e0576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761034e565b6040516101049190611150565b60405180910390f35b34801561011957600080fd5b50610122610376565b60405161012f9190611135565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610eff565b61038d565b005b34801561016d57600080fd5b5061017661044d565b6040516101839190611150565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190610e0f565b610457565b005b3480156101c157600080fd5b506101ca610656565b6040516101d79190611053565b60405180910390f35b3480156101ec57600080fd5b506101f5610680565b6040516102029190611150565b60405180910390f35b34801561021757600080fd5b5061022061068f565b60405161022d9190611150565b60405180910390f35b34801561024257600080fd5b5061025d60048036038101906102589190610e5c565b61069c565b60405161026b9291906110b2565b60405180910390f35b34801561028057600080fd5b50610289610784565b6040516102969190611150565b60405180910390f35b3480156102ab57600080fd5b506102c660048036038101906102c19190610ea5565b6107a8565b6040516102d3919061106e565b60405180910390f35b6102e46107e7565b005b3480156102f257600080fd5b5061030d60048036038101906103089190610ea5565b610956565b60405161031a9190611053565b60405180910390f35b34801561032f57600080fd5b5061033861099d565b6040516103459190611150565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043f57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610436929190611089565b60405180910390fd5b61044982826109a9565b5050565b6000600254905090565b60006104716040518060200160405280600081525061069c565b509050806104e05747600080549050600160149054906101000a900460ff1660018111156104a2576104a161143c565b5b6040517fe059521b0000000000000000000000000000000000000000000000000000000081526004016104d79392919061116b565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105055761050461143c565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105cf9594939291906110e2565b602060405180830381600087803b1580156105e957600080fd5b505af11580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106219190610ed2565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156106c4576106c361143c565b5b600060018111156106d8576106d761143c565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261070c919061124b565b1190506000806000805490501190506000804711905083801561072c5750825b80156107355750815b801561073e5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081815481106107b857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f0000000000000000000000000000000000000000000000000000000000000000341015610841576040517f74938f2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156108555761085461143c565b5b600160149054906101000a900460ff1660018111156108775761087661143c565b5b146108ae576040517fd6e19a8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b600080828154811061096b5761096a61146b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109c4576109c361146b565b5b60200260200101516109d691906113ad565b905060008082815481106109ed576109ec61146b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a8157610a8061143c565b5b0217905550600067ffffffffffffffff811115610aa157610aa061149a565b5b604051908082528060200260200182016040528015610acf5781602001602082028036833780820191505090505b5060009080519060200190610ae5929190610bda565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b139061103e565b60006040518083038185875af1925050503d8060008114610b50576040519150601f19603f3d011682016040523d82523d6000602084013e610b55565b606091505b5050905080610b90576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c53579160200282015b82811115610c525782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bfa565b5b509050610c609190610c64565b5090565b5b80821115610c7d576000816000905550600101610c65565b5090565b6000610c94610c8f846111c7565b6111a2565b90508083825260208201905082856020860282011115610cb757610cb66114d3565b5b60005b85811015610ce75781610ccd8882610de5565b845260208401935060208301925050600181019050610cba565b5050509392505050565b6000610d04610cff846111f3565b6111a2565b905082815260208101848484011115610d2057610d1f6114d8565b5b610d2b84828561133a565b509392505050565b600082601f830112610d4857610d476114ce565b5b8135610d58848260208601610c81565b91505092915050565b60008083601f840112610d7757610d766114ce565b5b8235905067ffffffffffffffff811115610d9457610d936114c9565b5b602083019150836001820283011115610db057610daf6114d3565b5b9250929050565b600082601f830112610dcc57610dcb6114ce565b5b8135610ddc848260208601610cf1565b91505092915050565b600081359050610df48161150f565b92915050565b600081519050610e098161150f565b92915050565b60008060208385031215610e2657610e256114e2565b5b600083013567ffffffffffffffff811115610e4457610e436114dd565b5b610e5085828601610d61565b92509250509250929050565b600060208284031215610e7257610e716114e2565b5b600082013567ffffffffffffffff811115610e9057610e8f6114dd565b5b610e9c84828501610db7565b91505092915050565b600060208284031215610ebb57610eba6114e2565b5b6000610ec984828501610de5565b91505092915050565b600060208284031215610ee857610ee76114e2565b5b6000610ef684828501610dfa565b91505092915050565b60008060408385031215610f1657610f156114e2565b5b6000610f2485828601610de5565b925050602083013567ffffffffffffffff811115610f4557610f446114dd565b5b610f5185828601610d33565b9150509250929050565b610f6481611291565b82525050565b610f738161127f565b82525050565b610f82816112a3565b82525050565b610f91816112af565b82525050565b6000610fa282611224565b610fac818561122f565b9350610fbc818560208601611349565b610fc5816114e7565b840191505092915050565b610fd981611328565b82525050565b6000610fec600083611240565b9150610ff7826114f8565b600082019050919050565b61100b816112cc565b82525050565b61101a816112fa565b82525050565b61102981611304565b82525050565b61103881611314565b82525050565b600061104982610fdf565b9150819050919050565b60006020820190506110686000830184610f6a565b92915050565b60006020820190506110836000830184610f5b565b92915050565b600060408201905061109e6000830185610f6a565b6110ab6020830184610f6a565b9392505050565b60006040820190506110c76000830185610f79565b81810360208301526110d98184610f97565b90509392505050565b600060a0820190506110f76000830188610f88565b611104602083018761102f565b6111116040830186611002565b61111e6060830185611020565b61112b6080830184611020565b9695505050505050565b600060208201905061114a6000830184610fd0565b92915050565b60006020820190506111656000830184611011565b92915050565b60006060820190506111806000830186611011565b61118d6020830185611011565b61119a6040830184611011565b949350505050565b60006111ac6111bd565b90506111b8828261137c565b919050565b6000604051905090565b600067ffffffffffffffff8211156111e2576111e161149a565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561120e5761120d61149a565b5b611217826114e7565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611256826112fa565b9150611261836112fa565b925082821015611274576112736113de565b5b828203905092915050565b600061128a826112da565b9050919050565b600061129c826112da565b9050919050565b60008115159050919050565b6000819050919050565b60008190506112c7826114fb565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611333826112b9565b9050919050565b82818337600083830152505050565b60005b8381101561136757808201518184015260208101905061134c565b83811115611376576000848401525b50505050565b611385826114e7565b810181811067ffffffffffffffff821117156113a4576113a361149a565b5b80604052505050565b60006113b8826112fa565b91506113c3836112fa565b9250826113d3576113d261140d565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061150c5761150b61143c565b5b50565b611518816112fa565b811461152357600080fd5b5056fea26469706673582212203d3893b9a5a7d692545a67d6e7da649a62546e07e5c2ce70b237bf958f5db58564736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80635f1b0fd81161007f578063ae771f6b11610059578063ae771f6b1461029f578063c1af5785146102dc578063e55ae4e8146102e6578063fd6673f514610323576100dd565b80635f1b0fd81461020b5780636e04ff0d146102365780637ea3e6c114610274576100dd565b8063320229eb116100bb578063320229eb146101615780634585e33b1461018c578063473f1ddc146101b557806353a2c19a146101e0576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761034e565b6040516101049190611150565b60405180910390f35b34801561011957600080fd5b50610122610376565b60405161012f9190611135565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610eff565b61038d565b005b34801561016d57600080fd5b5061017661044d565b6040516101839190611150565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190610e0f565b610457565b005b3480156101c157600080fd5b506101ca610656565b6040516101d79190611053565b60405180910390f35b3480156101ec57600080fd5b506101f5610680565b6040516102029190611150565b60405180910390f35b34801561021757600080fd5b5061022061068f565b60405161022d9190611150565b60405180910390f35b34801561024257600080fd5b5061025d60048036038101906102589190610e5c565b61069c565b60405161026b9291906110b2565b60405180910390f35b34801561028057600080fd5b50610289610784565b6040516102969190611150565b60405180910390f35b3480156102ab57600080fd5b506102c660048036038101906102c19190610ea5565b6107a8565b6040516102d3919061106e565b60405180910390f35b6102e46107e7565b005b3480156102f257600080fd5b5061030d60048036038101906103089190610ea5565b610956565b60405161031a9190611053565b60405180910390f35b34801561032f57600080fd5b5061033861099d565b6040516103459190611150565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043f57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610436929190611089565b60405180910390fd5b61044982826109a9565b5050565b6000600254905090565b60006104716040518060200160405280600081525061069c565b509050806104e05747600080549050600160149054906101000a900460ff1660018111156104a2576104a161143c565b5b6040517fe059521b0000000000000000000000000000000000000000000000000000000081526004016104d79392919061116b565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105055761050461143c565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105cf9594939291906110e2565b602060405180830381600087803b1580156105e957600080fd5b505af11580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106219190610ed2565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156106c4576106c361143c565b5b600060018111156106d8576106d761143c565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261070c919061124b565b1190506000806000805490501190506000804711905083801561072c5750825b80156107355750815b801561073e5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081815481106107b857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f0000000000000000000000000000000000000000000000000000000000000000341015610841576040517f74938f2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156108555761085461143c565b5b600160149054906101000a900460ff1660018111156108775761087661143c565b5b146108ae576040517fd6e19a8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b600080828154811061096b5761096a61146b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109c4576109c361146b565b5b60200260200101516109d691906113ad565b905060008082815481106109ed576109ec61146b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a8157610a8061143c565b5b0217905550600067ffffffffffffffff811115610aa157610aa061149a565b5b604051908082528060200260200182016040528015610acf5781602001602082028036833780820191505090505b5060009080519060200190610ae5929190610bda565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b139061103e565b60006040518083038185875af1925050503d8060008114610b50576040519150601f19603f3d011682016040523d82523d6000602084013e610b55565b606091505b5050905080610b90576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c53579160200282015b82811115610c525782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bfa565b5b509050610c609190610c64565b5090565b5b80821115610c7d576000816000905550600101610c65565b5090565b6000610c94610c8f846111c7565b6111a2565b90508083825260208201905082856020860282011115610cb757610cb66114d3565b5b60005b85811015610ce75781610ccd8882610de5565b845260208401935060208301925050600181019050610cba565b5050509392505050565b6000610d04610cff846111f3565b6111a2565b905082815260208101848484011115610d2057610d1f6114d8565b5b610d2b84828561133a565b509392505050565b600082601f830112610d4857610d476114ce565b5b8135610d58848260208601610c81565b91505092915050565b60008083601f840112610d7757610d766114ce565b5b8235905067ffffffffffffffff811115610d9457610d936114c9565b5b602083019150836001820283011115610db057610daf6114d3565b5b9250929050565b600082601f830112610dcc57610dcb6114ce565b5b8135610ddc848260208601610cf1565b91505092915050565b600081359050610df48161150f565b92915050565b600081519050610e098161150f565b92915050565b60008060208385031215610e2657610e256114e2565b5b600083013567ffffffffffffffff811115610e4457610e436114dd565b5b610e5085828601610d61565b92509250509250929050565b600060208284031215610e7257610e716114e2565b5b600082013567ffffffffffffffff811115610e9057610e8f6114dd565b5b610e9c84828501610db7565b91505092915050565b600060208284031215610ebb57610eba6114e2565b5b6000610ec984828501610de5565b91505092915050565b600060208284031215610ee857610ee76114e2565b5b6000610ef684828501610dfa565b91505092915050565b60008060408385031215610f1657610f156114e2565b5b6000610f2485828601610de5565b925050602083013567ffffffffffffffff811115610f4557610f446114dd565b5b610f5185828601610d33565b9150509250929050565b610f6481611291565b82525050565b610f738161127f565b82525050565b610f82816112a3565b82525050565b610f91816112af565b82525050565b6000610fa282611224565b610fac818561122f565b9350610fbc818560208601611349565b610fc5816114e7565b840191505092915050565b610fd981611328565b82525050565b6000610fec600083611240565b9150610ff7826114f8565b600082019050919050565b61100b816112cc565b82525050565b61101a816112fa565b82525050565b61102981611304565b82525050565b61103881611314565b82525050565b600061104982610fdf565b9150819050919050565b60006020820190506110686000830184610f6a565b92915050565b60006020820190506110836000830184610f5b565b92915050565b600060408201905061109e6000830185610f6a565b6110ab6020830184610f6a565b9392505050565b60006040820190506110c76000830185610f79565b81810360208301526110d98184610f97565b90509392505050565b600060a0820190506110f76000830188610f88565b611104602083018761102f565b6111116040830186611002565b61111e6060830185611020565b61112b6080830184611020565b9695505050505050565b600060208201905061114a6000830184610fd0565b92915050565b60006020820190506111656000830184611011565b92915050565b60006060820190506111806000830186611011565b61118d6020830185611011565b61119a6040830184611011565b949350505050565b60006111ac6111bd565b90506111b8828261137c565b919050565b6000604051905090565b600067ffffffffffffffff8211156111e2576111e161149a565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561120e5761120d61149a565b5b611217826114e7565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611256826112fa565b9150611261836112fa565b925082821015611274576112736113de565b5b828203905092915050565b600061128a826112da565b9050919050565b600061129c826112da565b9050919050565b60008115159050919050565b6000819050919050565b60008190506112c7826114fb565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611333826112b9565b9050919050565b82818337600083830152505050565b60005b8381101561136757808201518184015260208101905061134c565b83811115611376576000848401525b50505050565b611385826114e7565b810181811067ffffffffffffffff821117156113a4576113a361149a565b5b80604052505050565b60006113b8826112fa565b91506113c3836112fa565b9250826113d3576113d261140d565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061150c5761150b61143c565b5b50565b611518816112fa565b811461152357600080fd5b5056fea26469706673582212203d3893b9a5a7d692545a67d6e7da649a62546e07e5c2ce70b237bf958f5db58564736f6c63430008070033",
  "devdoc": {
    "author": "AroundTheBlock7",
    "details": "This implements Chainlink VRF v2 and Chainlink Keepers",
    "kind": "dev",
    "methods": {},
    "title": "A sample Lottery Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating an untamperable decentralized smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 200,
        "contract": "contracts/LotteryVRF.sol:LotteryVRF",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 214,
        "contract": "contracts/LotteryVRF.sol:LotteryVRF",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 217,
        "contract": "contracts/LotteryVRF.sol:LotteryVRF",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)192"
      },
      {
        "astId": 219,
        "contract": "contracts/LotteryVRF.sol:LotteryVRF",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)192": {
        "encoding": "inplace",
        "label": "enum LotteryVRF.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}